---
title: "The LastTtoA Problem"
date: "2025-10-23"
date-format: long
author: Hemani Alaparthi, Benedek Kaibas, Miguel Orti Vila, Ritesh Ojha
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

# Introduction

::: {.fragment style="margin-top: -0.5em; font-size: 1em;"} 
- **Goal**: To implement and analyze the LastTtoA problem using multiple computation models and programming styles.
- **Problem**: Given a DNA string with symbols {A, C, T, G}, replace the last occurrence of 'T' with 'A'
- **Approaches**: Turing machine, Python (with/without regular expression(regex)), and other languages that is not python.
:::


## The LastTtoA Function

::: {.fragment}
- **Input**: A string `s` consisting of DNA symbols {A, C, T, G}

-**Output**: String `s'` where the last occurrence of 'T' is replaced with 'A'

**Examples**:
- `ATCGT` → `ATCGA`

- `TTTT` → `TTTA` (last T becomes A)

- `ACGAA` → `ACGAA` (no T to replace)
- `T` → `A`
:::



## Conclusion (Summary of Implementations)

::: {.fragment}
**Deterministic Turing Machine**:Formal 3-state machine with transition function (q0→q1→qhalt, tape operations)

- Example: `ATCGT⊔` → scan right → scan left → replace T → `ATCGA`

**Pure Python**: We used Loop-based scanning with string slicing reconstruction

- Example: `for i in range(len(dna)): if dna[i] == 'T': last_t_index = i`

**Python with Regex**: Implemented pattern matching to locate and process the last 'T' and transformation to 'A'

**Non-Python Implementation**:

**Result**: All implementations produce `"ATCGT"` → `"ATCGA"` 

**Comprehensive Testing**: All implementations validated with identical test suites

**Theoretical Analysis**: LastTtoA is **computable** and **tractable** (O(n))
:::

## Key Insights

::: {.fragment}
- **Universality**: Same problem solvable across different computational models
- **Efficiency**: All approaches achieve optimal O(n) time complexity  
- **Correctness**: Formal verification through comprehensive testing
:::




